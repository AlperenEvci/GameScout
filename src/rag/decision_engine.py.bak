"""
Decision Engine Module for GameScout

This module analyzes captured game information and generates contextual recommendations.
It maintains the current game state, tracks detected regions, and provides relevant tips
to the player based on their situation and character class.
"""

from config import settings
from utils.helpers import get_logger
import random
import time
import re
import sys
import os
import logging
from pathlib import Path
from data.sources.map_data import get_nearby_points_of_interest, get_quests_for_region
from data.sources.web_search import search_game_content, get_region_information
from llm.api_client import LLMAPIClient

# Add project root to Python path for imports
project_root = Path(__file__).parent.parent.parent
if project_root not in sys.path:
    sys.path.append(str(project_root))

# Try to import BG3KnowledgeBase from retriever module
try:
    from rag.retriever import BG3KnowledgeBase
except ImportError:
    BG3KnowledgeBase = None

logger = get_logger(__name__)

# Initialize the BG3 Knowledge Base
bg3_kb = None
if BG3KnowledgeBase is not None:
    bg3_kb = BG3KnowledgeBase()Base()
    try:
        kb_init_success = bg3_kb.initialize()
        if kb_init_success:ccess:
            logger.info("Baldur's Gate 3 Knowledge Base initialized successfully")       logger.info("Baldur's Gate 3 Knowledge Base initialized successfully")
        else:
            logger.warning("Failed to initialize Baldur's Gate 3 Knowledge Base")            logger.warning("Failed to initialize Baldur's Gate 3 Knowledge Base")
            bg3_kb = Nonekb = None
    except Exception as e:
        logger.error(f"Error initializing BG3 Knowledge Base: {str(e)}")Error initializing BG3 Knowledge Base: {str(e)}")
        bg3_kb = None
else:
    logger.info("BG3 Knowledge Base module not found, RAG features will be disabled")ill be disabled")

class GameState:
    """
    Represents the current detected state of the game.
    
    This class maintains information about the player's current region,
    character class, quests, and other relevant game state informationstate information
    extracted from OCR processing.
    """    """
    def __init__(self):
        self.current_region: str | None = None
        self.active_quests: list[str] = []str] = []
        self.character_class: str = settings.DEFAULT_CHARACTER_CLASSSS
        self.last_ocr_text: str = ""self.last_ocr_text: str = ""
        self.detected_keywords: list[str] = []
        self.last_tip_time = 0
        self.recent_tips = []  # Store recently shown tips to prevent repetitionetition
        self.last_location_check_time = 0  # Time of last location data updateself.last_location_check_time = 0  # Time of last location data update
        self.nearby_points_of_interest = []  # Nearby points of interestf_interest = []  # Nearby points of interest
        self.region_quests = []  # Quests in the region
        # Add more state variables as needed (e.g., player health, level, inventory) state variables as needed (e.g., player health, level, inventory)

    def update_from_ocr(self, text: str):
        """Updates the game state based on OCR text analysis."""
        Updates game state based on OCR text analysis.
        logger.debug("Updating game state from OCR text...")
        Args:
            text: The extracted text from OCR processingrocessing
        """t_length = len(text.strip())"""
        self.last_ocr_text = textR text length: {text_length} characters")
        logger.debug("Updating game state from OCR text...")
        if text_length == 0:
        # Log length of OCR text for debugging text - unable to update game state")# Log length of OCR text for debugging
        text_length = len(text.strip())
        logger.info(f"Received OCR text length: {text_length} characters")
        # --- Add logic to parse region, quests, etc. ---
        if text_length == 0:etected keywords
            logger.warning("Received empty OCR text - cannot update game state")game state")
            return
            gion detection
        # Clear previously detected keywordsn
        self.detected_keywords = []
        # OCR cleaning - remove color/ANSI codes and unnecessary characters
        # Region detectiontical - OCR output may contain green color and complex formats
        previous_region = self.current_regionext)_region
        
        # Clean OCR text - remove color/ANSI codes and unnecessary characterscharacters
        # This is critical - OCR output might contain colored text and complex formatting
        cleaned_text = self._clean_ocr_text(text)
        # Enhance region detection - region names specific to BG3
        # Convert to lowercase to better handle OCR variations
        text_lower = cleaned_text.lower()
            "ravaged beach": "Ravaged Beach",
        # Enhanced region detection - BG3-specific region names
        bg3_regions = {illage": "Blighted Village", regions = {
            # English region namesonrise Towers",s
            "ravaged beach": "Ravaged Beach",
            "emerald grove": "Emerald Grove", 
            "blighted village": "Blighted Village", 
            "moonrise towers": "Moonrise Towers",",s",
            "underdark": "Underdark", anki Creche",
            "grymforge": "Grymforge", ght Inn", 
            "shadowfell": "Shadowfell", ,
            "gauntlet of shar": "Gauntlet of Shar",tive spelling without apostropheof Shar",
            "githyanki creche": "Githyanki Creche",ands", 
            "last light inn": "Last Light Inn",  
            "wyrm's rock": "Wyrm's Rock",e",  # Alternative spelling without apostrophe
            "wyrms rock": "Wyrm's Rock",  # Alternative spelling without apostrophe
            "shadow-cursed lands": "Shadow-Cursed Lands", 
            "baldur's gate": "Baldur's Gate",
            "baldurs gate": "Baldur's Gate",  # Alternative spelling without apostrophepelling without apostrophe
            "zümrüt koru": "Emerald Grove",
            # Turkish region namesed Village",
            "harap sahil": "Ravaged Beach",e",  # Alternative spelling without ö
            "zumrut koru": "Emerald Grove",  # Alternative spelling without üithout ü
            "zümrüt koru": "Emerald Grove", Towers",  # Alternative spelling without ğ, ü
            "lanetli köy": "Blighted Village",
            "lanetli koy": "Blighted Village",  # Alternative spelling without ö
            "ay doğuşu kuleleri": "Moonrise Towers",
            "ay dogusu kuleleri": "Moonrise Towers",  # Alternative without ğ, ürs",  # Alternative without ğ, ü
            "yeraltı diyarı": "Underdark", # Alternative spelling without ö, ü, ş    "yeraltı diyarı": "Underdark",
            "yeralti diyari": "Underdark",  # Alternative without ı, ğ
            "grym demirhanesi": "Grymforge",Shar",  # Alternative spelling without ' "Grymforge",
            "gölge düşüşü": "Shadowfell",i Creche",    "gölge düşüşü": "Shadowfell",
            "golge dususu": "Shadowfell",  # Alternative without ö, ü, şing without ş, ğ",  # Alternative without ö, ü, ş
            "shar'ın eldiveni": "Gauntlet of Shar",
            "sharin eldiveni": "Gauntlet of Shar",  # Alternative without 'out ı, şof Shar",  # Alternative without '
            "githyanki beşiği": "Githyanki Creche",
            "githyanki besigi": "Githyanki Creche",  # Alternative without ş, ğ
            "son ışık hanı": "Last Light Inn",-Cursed Lands",ht Inn",
            "son isik hani": "Last Light Inn",  # Alternative without ı, şve spelling without ö hani": "Last Light Inn",  # Alternative without ı, ş
            "ejderha kayası": "Wyrm's Rock",ow-Cursed Lands",  # Alternative spelling without hyphen    "ejderha kayası": "Wyrm's Rock",
            "ejderha kayasi": "Wyrm's Rock",  # Alternative without ı
            "gölge-lanetli topraklar": "Shadow-Cursed Lands",
            "golge-lanetli topraklar": "Shadow-Cursed Lands",  # Alternative without ötive without ö
            "gölge lanetli topraklar": "Shadow-Cursed Lands",  # Alternative without hyphenen
        }
        # Direct match check
        # 1. Check for direct region name in texts.items():Check for direct region name in text
        region_detected = Falseext_lower:on_detected = False
                self.current_region = region_key
        # Check for exact matches firstBG3 region: '{region_name}' -> '{region_key}'")
        for region_name, region_key in bg3_regions.items():
            if region_name in text_lower:
                self.current_region = region_key
                logger.info(f"Detected BG3 region: '{region_name}' -> '{region_key}'")name}' -> '{region_key}'")
                region_detected = True
                breaktext containing region labels
            region_labels = [
        # 2. Look for region names around keywords like "Region:" or "location:"
        if not region_detected:tion:", "region:", "entering region:"
            # Search for text containing region labels
            region_labels = [
                "bölge:", "bolge:", "bölgeye giriş:", "bolgeye giris:",
                "konum:", "location:", "region:", "entering region:"
            ]       # Take the text after the label
                    parts = text_lower.split(label, 1)
            for label in region_labels:
                if label in text_lower:arts[1].strip()ext_lower:
                    # Get text after the labeln name within the first 30 characters (bounded by newline or period)            # Get text after the label
                    parts = text_lower.split(label, 1)t("\n")[0].split(".")[0][:30].strip()
                    if len(parts) > 1:
                        after_label = parts[1].strip()any known region name?label = parts[1].strip()
                        # Look for region name in first 30 chars (limited by newline or period)
                        region_text = after_label.split("\n")[0].split(".")[0][:30].strip()ip()
                                self._fuzzy_region_match(region_text, region_name)):           
                        # Does this region text match a known region name?  # Does this region text match a known region name?
                        for region_name, region_key in bg3_regions.items():{label}': '{region_text}' -> '{region_key}'")egion_key in bg3_regions.items():
                            if (region_name in region_text or gion_text or 
                                self._fuzzy_region_match(region_text, region_name)):
                                self.current_region = region_key
                                logger.info(f"Detected region after label '{label}': '{region_text}' -> '{region_key}'")
                                region_detected = True
                                breakn hints like "Yeni Görev" or "New Quest"
                    if region_detected:
                        break[
                "yeni görev:", "görev güncellendi:", "yeni gorev:", "gorev guncellendi:",
        # 3. Region name might be in quest hints like "New Quest" or "Quest Updated"
        if not region_detected:
            quest_triggers = [
                "yeni görev:", "görev güncellendi:", "yeni gorev:", "gorev guncellendi:",di:",
                "new quest:", "quest updated:", "mission:":"
            ]       # Take the text after the trigger
                    parts = text_lower.split(trigger, 1)    
            for trigger in quest_triggers:
                if trigger in text_lower:arts[1].strip()ext_lower:
                    # Get text after the triggername within the first 50 characters
                    parts = text_lower.split(trigger, 1)g3_regions.items():
                    if len(parts) > 1:_name in after_trigger[:50] or 
                        after_trigger = parts[1].strip()(after_trigger[:50], region_name)):ger = parts[1].strip()
                        # Look for region name in first 50 charsfor region name in first 50 chars
                        for region_name, region_key in bg3_regions.items():ger '{trigger}': '{region_name}' -> '{region_key}'"), region_key in bg3_regions.items():
                            if (region_name in after_trigger[:50] or ion_name in after_trigger[:50] or 
                                self._fuzzy_region_match(after_trigger[:50], region_name)):
                                self.current_region = region_key
                                logger.info(f"Detected region in quest trigger '{trigger}': '{region_name}' -> '{region_key}'")
                                region_detected = True
                                breakfor partial region name anywhere in the text
                    if region_detected:
                        breakregion_key in bg3_regions.items():    break
                # For region names consisting of multiple words, check each word
        # 4. Fuzzy matching - look for partial region names anywhere in text
        if not region_detected: 1:
            for region_name, region_key in bg3_regions.items():
                # For multi-word region names, check each word
                words = region_name.split()
                if len(words) > 1:rds: > 1:
                    matches = 0word) > 3:  # Important words (longer than 3 letters)    matches = 0
                    important_words = 0ords += 1
                            # Is there an exact or fuzzy match for the word?
                    for word in words: text_lower or self._fuzzy_word_match(text_lower, word):
                        if len(word) > 3:  # Important words (longer than 3 chars)
                            important_words += 1
                            # Check if word or similar exists important words should match
                            if word in text_lower or self._fuzzy_word_match(text_lower, word):uzzy_word_match(text_lower, word):
                                matches += 1= region_key   matches += 1
                        match_percent = (matches / important_words) * 100            
                    # Calculate match score - at least 70% of important words should matche}' -> '{region_key}' (%{match_percent:.1f} match)")mportant words should match
                    if important_words > 0 and matches / important_words >= 0.7:t_words >= 0.7:
                        self.current_region = region_key
                        match_percent = (matches / important_words) * 100
                        logger.info(f"Detected region via fuzzy word matching: '{region_name}' -> '{region_key}' ({match_percent:.1f}% match)"){match_percent:.1f}% match)")
                        region_detected = TrueOnly long single wordsTrue
                        breaky = self._string_similarity(text_lower, region_name)
                    if similarity > 0.7:  # More than 70% similarity
                # For single-word region names, check for partial matchesatches
                elif len(region_name) > 5:  # Only longer single wordsty: '{region_name}' -> '{region_key}' (%{similarity*100:.1f} similarity)") longer single words
                    similarity = self._string_similarity(text_lower, region_name)
                    if similarity > 0.7:  # More than 70% similarity
                        self.current_region = region_key
                        logger.info(f"Detected region via text similarity: '{region_name}' -> '{region_key}' ({similarity*100:.1f}% similarity)")1f}% similarity)")
                        region_detected = True
                        breakPC names or keywords occurring in the game (associated with regions)
            bg3_keywords = {
        # 5. Last resort: Special BG3 keywords (standalone)
        if not region_detected:ald Grove",
            # Special location/NPC names or keywords in the game (associated with regions)
            bg3_keywords = {rald Grove",
                "halsin": "Emerald Grove",illage",
                "zevlor": "Emerald Grove",illage",
                "kagha": "Emerald Grove",illage",   "kagha": "Emerald Grove",
                "arka": "Emerald Grove",ghted Village",    "arka": "Emerald Grove",
                "goblin camp": "Blighted Village",
                "goblin kamp": "Blighted Village",age",
                "dank crypt": "Blighted Village",
                "rutubetli kripta": "Blighted Village",
                "minthara": "Moonrise Towers",
                "ketheric": "Moonrise Towers",",": "Moonrise Towers",
                "myconid colony": "Underdark",,        "myconid colony": "Underdark",
                "mikonid kolonisi": "Underdark",
                "glut": "Underdark", Shar",",
                "auntie ethel": "Emerald Grove",s",
                "teyze ethel": "Emerald Grove",
                "isobel": "Last Light Inn",,
                "shar": "Gauntlet of Shar",
                "nightsong": "Shadow-Cursed Lands",ms():
                "jaheira": "Last Light Inn"aheira": "Last Light Inn"
            }       self.current_region = region
                    logger.info(f"Detected region by BG3 keyword: '{keyword}' -> '{region}'")
            for keyword, region in bg3_keywords.items():d, region in bg3_keywords.items():
                if keyword in text_lower:
                    self.current_region = region
                    logger.info(f"Detected region via BG3 keyword: '{keyword}' -> '{region}'") via BG3 keyword: '{keyword}' -> '{region}'")
                    region_detected = True
                    breakregion != previous_region or 
            current_time - self.last_location_check_time > 300):  # Update every 5 minutes
        # Update map data if location changed or significant time has passed
        current_time = time.time() != previous_region and previous_region is not None:
        if (self.current_region != previous_region or us_region}' -> '{self.current_region}'")self.current_region != previous_region or 
            current_time - self.last_location_check_time > 300):  # Update every 5 minutes
            self.update_location_data()
            if self.current_region != previous_region and previous_region is not None:
                logger.info(f"Region changed: '{previous_region}' -> '{self.current_region}'")
                t interesting keywords from the text (in Turkish and English)
            self.update_location_data()
            self.last_location_check_time = current_time
            "quest", "mission", "objective", "enemy", "gold", "weapon", "armor", 
        # Extract interesting keywords from text (English and Turkish)", "choice",# Extract interesting keywords from text (English and Turkish)
        interesting_keywords = [ "rest", "spell", "attack", "defend", "loot", "chest",
            # English keywordstealth", "hidden", "secret", "map", "journal", "party",
            "quest", "mission", "objective", "enemy", "gold", "weapon", "armor", 
            "character", "health", "magic", "skill", "battle", "dialog", "choice",
            "companion", "camp", "rest", "spell", "attack", "defend", "loot", "chest",end", "loot", "chest",
            "trap", "lock", "stealth", "hidden", "secret", "map", "journal", "party",, "silah", "zırh", "zirh", "karakter", cret", "map", "journal", "party",
            "inventory", "level up", "ability", "saving throw", "roll", "dice",savas", "diyalog", "seçim", "secim", level up", "ability", "saving throw", "roll", "dice",
            "yoldaş", "yoldas", "kamp", "dinlenme", "büyü", "buyu", "saldırı", "saldiri", "savunma", "ganimet", 
            # Turkish keywords, "hazine", "tuzak", "kilit", "gizlilik", "gizli", "sır", "sir", "harita", 
            "görev", "gorev", "misyon", "hedef", "düşman", "dusman", "altın", "altin", "silah", "zırh", "zirh", "karakter", n", "dusman", "altın", "altin", "silah", "zırh", "zirh", "karakter", 
            "sağlık", "saglik", "büyü", "buyu", "yetenek", "beceri", "savaş", "savas", "diyalog", "seçim", "secim", 
            "yoldaş", "yoldas", "kamp", "dinlenme", "büyü", "buyu", "saldırı", "saldiri", "savunma", "ganimet", 
            "sandık", "sandik", "hazine", "tuzak", "kilit", "gizlilik", "gizli", "sır", "sir", "harita", 
            "günlük", "gunluk", "parti", "grup", "envanter", "seviye atlama", "yetenek", nter", "seviye atlama", "yetenek", 
            "kurtarma zarı", "kurtarma zari", "zar", "konum", "bölge", "bolge"ri", "zar", "konum", "bölge", "bolge"
        ]       logger.info(f"Detected keyword in OCR text: '{keyword}'")
                self.detected_keywords.append(keyword)
        for keyword in interesting_keywords:
            if keyword.lower() in text_lower:nd English)
                logger.info(f"Detected keyword '{keyword}' in OCR text")ext")
                self.detected_keywords.append(keyword)s.append(keyword)
            "new quest", "quest updated", "journal updated", "mission acquired",
        # Quest detection logic (English and Turkish)
        quest_triggers = ["yeni gorev", "görev güncellendi", "gorev guncellendi", "günlük güncellendi", "gunluk guncellendi", 
            # Englishındı", "gorev alindi", "misyon başladı", "misyon basladi", "görev başladı", "gorev basladi", 
            "new quest", "quest updated", "journal updated", "mission acquired",acquired",
            # Turkishh
            "yeni görev", "yeni gorev", "görev güncellendi", "gorev guncellendi", "günlük güncellendi", "gunluk guncellendi", 
            "görev alındı", "gorev alindi", "misyon başladı", "misyon basladi", "görev başladı", "gorev basladi", 
            "görev tamamlandı", "gorev tamamlandi"görev tamamlandı", "gorev tamamlandi"
        ]       logger.info(f"Detected quest activity: '{trigger}'")
                self.detected_keywords.append("quest_update")
        for trigger in quest_triggers:est_triggers:
            if trigger.lower() in text_lower:
                logger.info(f"Detected quest activity: '{trigger}'"){trigger}'")
                self.detected_keywords.append("quest_update")cape characters, etc."""pend("quest_update")
                break color and format codes
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    def _clean_ocr_text(self, text):ext)
        """
        Cleans OCR text - removes ANSI color codes, escape characters, etc.characters, etc.
        text = re.sub(r'[\x00-\x1F\x7F]', '', text)
        Args:
            text: The OCR text to clean, and newlines with a single space
             = re.sub(r'\s+', ' ', text)
        Returns:
            Cleaned text mistakes
        """lacements = {
        # Remove ANSI color and format codes color and format codes
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        text = ansi_escape.sub('', text)e iscape.sub('', text)
            '@': 'a',  # at sign -> lowercase a
        # Remove terminal-specific control characters (e.g., ^M, ^G, etc.)., ^M, ^G, etc.)
        text = re.sub(r'[\x00-\x1F\x7F]', '', text)here(r'[\x00-\x1F\x7F]', '', text)
        }
        # Replace multiple whitespace, tabs, and newlines with a single space
        text = re.sub(r'\s+', ' ', text)rkish characters(r'\s+', ' ', text)
        tr_replacements = {
        # Fix common OCR confusion characterss
        replacements = {# dotted i charactereplacements = {
            '0': 'o',  # Zero -> lowercase o> lowercase o
            'l': 'i',  # lowercase L -> lowercase i
            '1': 'i',  # One -> lowercase i
            '@': 'a',  # at sign -> lowercase a
            '$': 's',  # dollar sign -> lowercase s> lowercase s
            # Add other common OCR errors here
        }   'İ': 'I',
            'Ö': 'O',
        # Accept ASCII equivalents of Turkish characters
        tr_replacements = { {
            'ı': 'i',    'ı': 'i',
            'i̇': 'i',  # dotted i character
            'ö': 'o',
            'ü': 'u',
            'ş': 's',haracter replacements
            'ç': 'c',in {**replacements, **tr_replacements}.items():
            'ğ': 'g',xt.replace(old, new)
            # For uppercase as well
            'İ': 'I',essary punctuation marks',
            'Ö': 'O',(r'[^\w\s\.]', ' ', text)
            'Ü': 'U',
            'Ş': 'S',f"Cleaned OCR text - Original length: {len(text)}")
            'Ç': 'C',C',
            'Ğ': 'G'
        }fuzzy_region_match(self, text, region_name):
        """Fuzzy region matching - checks the similarity between region name and text."""
        # Apply all character replacements60% of the region name words are in the text
        for old, new in {**replacements, **tr_replacements}.items():
            text = text.replace(old, new))
            return False
        # Clean unnecessary punctuation
        text = re.sub(r'[^\w\s\.]', ' ', text)
        for word in words:
        logger.debug(f"OCR text cleaned - Original length: {len(text)}")(text, word)): length: {len(text)}")
        return textches += 1
                
    def _fuzzy_region_match(self, text, region_name):):
        """urn match_ratio >= 0.6
        Fuzzy region matching - checks similarity between region name and text.
        _fuzzy_word_match(self, text, word):
        Args:zzy word matching - checks if there is a similar word in the text."""
            text: The text to check The text to check
            region_name: The region name to match againstort wordsto match against
            
        Returns: for the first 2/3 and last 2/3 of the word in the text
            True if there's a fuzzy match, False otherwiserwise
        """fix_len = max(2, int(len(word) * 0.67))
        # Match if at least 60% of region name words are in textt 60% of region name words are in text
        words = region_name.split()
        if len(words) <= 1:[:prefix_len]
            return Falsewer[-suffix_len:]
            
        matches = 0 prefix or suffix is in the text, it's a match
        for word in words:ext or suffix in text
            if len(word) > 2 and (word in text or self._fuzzy_word_match(text, word)):
                matches += 1elf, s1, s2):
                lates the similarity ratio between two strings."""
        match_ratio = matches / len(words)asure instead of Levenshtein distanceh_ratio = matches / len(words)
        return match_ratio >= 0.6
            return 0.0
    def _fuzzy_word_match(self, text, word):
        """ount the number of characters common to both strings
        Fuzzy word matching - checks if a similar word exists in text.
        s2_chars = set(s2.lower())
        Args:
            text: The text to check.intersection(s2_chars))text: The text to check
            word: The word to look foron(s2_chars))
            
        Returns:_chars == 0:
            True if there's a fuzzy match, False otherwise
        """ 
        if len(word) <= 3:s / total_charsif len(word) <= 3:
            return False  # Don't do fuzzy matching for very short words
            te_location_data(self):
        # Look for first 2/3 and last 2/3 of word in text"
        word_lower = word.lower()n:        word_lower = word.lower()
        prefix_len = max(2, int(len(word) * 0.67))ping location data update")n(word) * 0.67))
        suffix_len = max(2, int(len(word) * 0.67))
            
        prefix = word_lower[:prefix_len]data for region: {self.current_region}")
        suffix = word_lower[-suffix_len:]
        # Get points of interest for the region
        # A match is if either prefix or suffix appears in textints_of_interest(self.current_region)        # A match is if either prefix or suffix appears in text
        return prefix in text or suffix in textoints_of_interest)} points of interest")x in text
        
    def _string_similarity(self, s1, s2):
        """f.region_quests = map_data.get_quests_for_region(self.current_region)        """
        Calculate similarity ratio between two strings.quests for this region")larity ratio between two strings.
        
        Args:ecent_tip(self, tip):
            s1: First stringown tips to prevent repetition"""
            s2: Second stringnd(tip)
            ep only the last 10 tips to prevent the list from growing indefinitely
        Returns:elf.recent_tips) > 10:        Returns:
            Similarity ratio (0.0 to 1.0)      Similarity ratio (0.0 to 1.0)
        """
        # Using a simplified similarity measure instead of Levenshtein distancead of Levenshtein distance
        if not s1 or not s2:s shown recently"""1 or not s2:
            return 0.0self.recent_tips
            
        # Count characters present in both strings
        s1_chars = set(s1.lower()): {self.current_region}, "
        s2_chars = set(s2.lower())elf.active_quests)}, "
                f"Sınıf: {self.character_class}, "
        common_chars = len(s1_chars.intersection(s2_chars))s}, "
        total_chars = len(s1_chars.union(s2_chars))points_of_interest)})")
        
        if total_chars == 0:
            return 0.0anı kategorilere göre düzenlendi
            
        return common_chars / total_chars
            cu: Oyununuzu düzenli olarak kaydetmeyi unutmayın.",
    def update_location_data(self):alardan kaçınmak için gizlilik kullanarak keşif yapın.",
        """Updates map data for the current region."""aj için ekibinizi konumlandırın.",  """Updates map data for the current region."""
        if not self.current_region:gizli yollar için çevrenizi kontrol edin.",self.current_region:
            logger.debug("No detected region, skipping location data update"),te")
            returnC'lerle birden fazla kez konuşun, yeni diyalog seçenekleri olabilir.",
            cu: Daha iyi saldırı zarları için yükseklik avantajı kullanın.",
        logger.info(f"Updating location data for region: {self.current_region}")ir.",")
        "İpucu: Büyü slotlarını ve yetenekleri yenilemek için uzun dinlenme yapın.",
        # Get points of interest for the regionumlara itmek için İtme kullanabilirsiniz.",
        self.nearby_points_of_interest = map_data.get_nearby_points_of_interest(self.current_region)",ent_region)
        logger.debug(f"Found {len(self.nearby_points_of_interest)} points of interest")
        "İpucu: Pasif becerilerin otomatik olarak çalıştığını unutmayın - etkinleştirmenize gerek yok.",
        # Get quests for the region sol tıklama tuşunu basılı tutarak alabilirsiniz.",
        self.region_quests = map_data.get_quests_for_region(self.current_region)egion_quests = map_data.get_quests_for_region(self.current_region)
        logger.debug(f"Found {len(self.region_quests)} quests for this region")
    "combat": [
    def add_recent_tip(self, tip): avantaj için yüksek zemini kullanın.",
        """vaş İpucu: Zorlu savaşlarda tomar ve iksir gibi tüketilebilir öğeleri kullanmayı düşünün.",
        Track recently shown tips to prevent repetitionönce düşman büyücüleri hedef alın.",
        "Savaş İpucu: Fırsat saldırılarından kaçınmak için Ayrılma kullanın.",
        Args:ş İpucu: Etkili hasar türleri seçmek için düşman dirençlerini kontrol edin.",
            tip: The tip that was shownavantaj sağlamak için Yardım eylemi kullanın.",
        """vaş İpucu: Bir düşmanı yandan sıkıştırmak saldırı zarlarında avantaj sağlar.",
        self.recent_tips.append(tip)anmak için savaş sırasında zıplayabileceğinizi unutmayın.",
        # Keep only the last 10 tips to prevent infinite growthn.",
        if len(self.recent_tips) > 10:den çok hedefi vurabilir ancak dost ateşine dikkat edin.",  if len(self.recent_tips) > 10:
            self.recent_tips.pop(0)
    "exploration": [
    def was_recently_shown(self, tip):i düğmeler ve kollar arayın.",
        """şif İpucu: Gizli hazineleri tespit etmek için en yüksek Algılama karakterinizi kullanın.",
        Checks if a tip was recently shownin kitap raflarını ve kapları kontrol edin.",
        "Keşif İpucu: Tuzakları gizleyebilecek renkli zemin karolarına dikkat edin.",
        Args:f İpucu: Bazı duvarlar, gizli alanları açığa çıkarmak için yok edilebilir.",
            tip: The tip to checkrişilemeyen alanlara ulaşmak için Zıplama kullanın.",
            if İpucu: Anahtarlarla daha sonra dönmek için kilitli kapıların notunu tutun.",
        Returns:pucu: Bazı sandıklar tuzaklıdır - kontrol etmek için yüksek Algılama karakteri kullanın.",
            True if the tip was recently shown, False otherwiseşif yapın.",
        """şif İpucu: Yukarıya bakın - hazineler ve yollar yukarıda olabilir.",  """
        return tip in self.recent_tips
    "social": [
    def __str__(self): Karakterinizin geçmişi bazı diyalog seçeneklerini etkiler.",
        return (f"GameState(Region: {self.current_region}, "e yardımcı olur.",
                f"Quests: {len(self.active_quests)}, "lerle özel diyalogları olabilir.",
                f"Class: {self.character_class}, "g seçeneklerinin kilidini açabilir.",
                f"Keywords: {self.detected_keywords}, "n size nasıl yanıt vereceğini etkileyebilir.",
                f"POIs: {len(self.nearby_points_of_interest)})")ı belirlemeye yardımcı olabilir.",      f"POIs: {len(self.nearby_points_of_interest)})")
        "Sosyal İpucu: Bazı diyalog seçimleri, yoldaşlarınızla ilişkinizi kalıcı olarak etkiler.",
        "Sosyal İpucu: Görevlere farklı yaklaşımlar farklı ödüllere yol açabilir.",
# BG3 tips database organized by categoriessında onay/onaylamama göstergelerine dikkat edin.",
BG3_TIPS = {yal İpucu: Bazı kararlar belirli görev yollarını kalıcı olarak kapatabilir.",
    "general": [
        "Tip: Remember to save your game regularly.",
        "Tip: Use stealth to scout and avoid dangerous encounters.",unters.",
        "Tip: Position your team before starting combat for tactical advantage.",on your team before starting combat for tactical advantage.",
        "Tip: Check your surroundings for hidden treasures and secret paths.",nutmayın.",
        "Tip: Look out for environmental hazards you can use in combat.",ullanmayı düşünün.",
        "Tip: Talk to NPCs multiple times, they may have new dialogue options.",
        "Tip: Use height advantage for better attack rolls.",aşina kullanın.",
        "Tip: Characters in shadows have advantage on stealth checks.",
        "Tip: Long rest to replenish spell slots and abilities.",ilities.",
        "Tip: You can use Push to shove enemies into hazards or off cliffs.",ir.",can use Push to shove enemies into hazards or off cliffs.",
        "Tip: Prepare different spells after long rests to adapt to new challenges.",anın.",,
        "Tip: Distribute healing potions among all party members.",i yeteneğini düşünün.",
        "Tip: Remember that passive skills work automatically - no need to activate them.",rın.",te them.",
        "Tip: You can pick up moveable objects by holding down the left mouse button.",kullanabilirsiniz.",
        "Tip: Some locks can be broken if lockpicking fails.",
    ],  "Cleric": [
    "combat": [hip İpucu: Uzun dinlenmeden sonra büyülerinizi hazırlamayı unutmayın.",
        "Combat Tip: Use high ground for advantage on attacks.",e yenilenir.",
        "Combat Tip: Consider using consumables like scrolls and potions in tough fights.",hts.",
        "Combat Tip: Target enemy spellcasters first to stop them casting spells.",
        "Combat Tip: Use Disengage to avoid opportunity attacks.",arını kontrol etmeye yardımcı olabilir.",
        "Combat Tip: Check enemy resistances to choose effective damage types.",
        "Combat Tip: Use the Help action to give your allies advantage.",ntage.",
        "Combat Tip: Flanking an enemy gives advantage on attack rolls.",kullanın.",p: Flanking an enemy gives advantage on attack rolls.",
        "Combat Tip: Remember you can jump during combat to reposition.",e gizlenin.",
        "Combat Tip: Use Dodge for defensive positioning.",in fırsatlar arayın.",
        "Combat Tip: AOE spells can hit multiple targets but watch for friendly fire.",lsiniz.",dly fire.",
    ],      "Hırsız İpucu: Temel becerilerde olağanüstü iyi olmak için Uzmanlık kullanın.",
    "exploration": [
        "Exploration Tip: Look for hidden buttons and levers in dungeons.",ngeons.",
        "Exploration Tip: Use your character with highest Perception to spot hidden treasures.", your character with highest Perception to spot hidden treasures.",
        "Exploration Tip: Check bookshelves and containers for lore and items.",n.",
        "Exploration Tip: Watch for colored floor tiles that might conceal traps.",debilirsiniz.",
        "Exploration Tip: Some walls can be destroyed to reveal hidden areas.",
        "Exploration Tip: Use Jump to reach seemingly inaccessible areas.",ayı düşünün.",
        "Exploration Tip: Make note of locked doors to return with keys later.",
        "Exploration Tip: Some chests are trapped - use a high Perception character to check.",check.",
        "Exploration Tip: Scout with Find Familiar to explore safely.",lir.",ion Tip: Scout with Find Familiar to explore safely.",
        "Exploration Tip: Look up - treasures and paths may be above you.",lışmaya devam eder.",
    ],      "Druid İpucu: Bilgi edinmek için hayvanlarla konuşabilirsiniz.",
    "social": [uid İpucu: Alan etkili büyüleri kullanırken araziyi dikkate alın.",
        "Social Tip: Your character's background affects some dialogue options.",n.",
        "Social Tip: High Charisma helps with persuasion and intimidation.",
        "Social Tip: Different companions may have special dialogues with certain NPCs.",in NPCs.",
        "Social Tip: Specific items can unlock special dialogue options.",rbe kullanın.",Specific items can unlock special dialogue options.",
        "Social Tip: Character race and class can affect how NPCs respond to you.",uslar verir.",,
        "Social Tip: Insight can help determine if an NPC is being truthful.",nda iyileştirebilir.",
        "Social Tip: Some dialogue choices can permanently affect your relationship with companions.",
        "Social Tip: Different approaches to quests can lead to different rewards.",
        "Social Tip: Pay attention to approval/disapproval indicators during companion dialogues.",
        "Social Tip: Some decisions can permanently close off certain quest paths.",aths.",
    ],      "Ozan İpucu: Bardik İlham, müttefiklerin kritik anlarda başarılı olmasına yardımcı olabilir.",
    "class_specific": {: Büyülü Sırlar ile herhangi bir sınıftan büyüler öğrenebilirsiniz.",
        "Wizard": [pucu: Bütün Becerilerin Üstadı tüm beceri kontrollerine bonuslar verir.",
            "Wizard Tip: Look for spell scrolls to add to your spellbook.",mmel kılar.",
            "Wizard Tip: Remember to prepare different spells after a long rest.",için saklayın.",
            "Wizard Tip: Consider using ritual spells to save spell slots.",
            "Wizard Tip: Position yourself away from melee combat.",e combat.",
            "Wizard Tip: Use your familiar to scout dangerous areas.",nak tanır.",rd Tip: Use your familiar to scout dangerous areas.",
        ],  "Büyücü İpucu: Gerektiğinde büyücülük puanlarını büyü slotlarına dönüştürün.",
        "Fighter": [İpucu: Dikkatli Büyü, müttefikleri AOE büyülerden korumaya yardımcı olur.",
            "Fighter Tip: Second Wind can provide emergency healing in combat.",ye katlar.",
            "Fighter Tip: Action Surge gives you an extra action - use it wisely.",.",
            "Fighter Tip: Consider the Sentinel ability to control the battlefield.",
            "Fighter Tip: Position yourself to protect more vulnerable party members.",members.",
            "Fighter Tip: You can effectively use heavy weapons due to your proficiency.",n effectively use heavy weapons due to your proficiency.",
        ],  "Büyücü Paktı İpucu: Şeytani Çağrılar seviye atlarken değiştirilebilir.",
        "Cleric": [ Paktı İpucu: Lanet belirli bir hedefe karşı hasarınızı artırır.",
            "Cleric Tip: Remember to prepare your spells after a long rest.",llıca seçin.",
            "Cleric Tip: Your Channel Divinity refreshes with a short rest.",",
            "Cleric Tip: Domain spells are always prepared and don't count against your limit.",
            "Cleric Tip: Balance offensive, defensive, and healing spells.",pells.",
            "Cleric Tip: Turn Undead can help control crowds of undead enemies.",ilenirler.",      "Cleric Tip: Turn Undead can help control crowds of undead enemies.",
        ],  "Keşiş İpucu: Sabırlı Savunma size karşı yapılan saldırılara dezavantaj verir.",
        "Rogue": [ İpucu: Darbe Sağanağı Ki puanları için ekstra saldırılar verir.",
            "Rogue Tip: Use Cunning Action to disengage after attacking.",fırlatabilirsiniz.",
            "Rogue Tip: Hide before combat to get a surprise attack bonus.",devre dışı bırakabilir.",us.",
            "Rogue Tip: Look for opportunities to gain Sneak Attack damage.",
            "Rogue Tip: You excel at disarming traps and picking locks.",
            "Rogue Tip: Use Expertise to be exceptionally good at core skills.",p: Use Expertise to be exceptionally good at core skills.",
        ],  "Barbar İpucu: Pervasız Saldırı avantaj sağlar ancak sizi savunmasız bırakır.",
        "Ranger": [ İpucu: Tehlike Sezgisi Çeviklik kurtarma zarlarında avantaj sağlar.",
            "Ranger Tip: Mark enemies as Favored Enemy for bonuses.", en iyi sonucu verir.",
            "Ranger Tip: Use your animal companion for tactical advantages.", olur.",
            "Ranger Tip: You can track creatures effectively in your Favored Terrain.",
            "Ranger Tip: Hunter's Mark increases your damage output.",
            "Ranger Tip: Consider using ranged weapons to attack safely.",
        ],avaged Beach": [
        "Druid": [ İpucu: Kullanışlı eşyalar için gemi enkazını iyice araştırın.",
            "Druid Tip: Wild Shape can be used for combat or exploration.",
            "Druid Tip: Concentration spells continue working while in Wild Shape.",.",
            "Druid Tip: You can speak with animals to gain information.",siyonuna neden olurlar.",  "Druid Tip: You can speak with animals to gain information.",
            "Druid Tip: Consider terrain when using area effect spells.",
            "Druid Tip: Prepare different spells when different challenges are expected.",
        ],  "Bölge İpucu: Druidlerin iribaşlar hakkında önemli bilgileri olabilir.",
        "Paladin": [pucu: Güçlü bir müttefik kazanmak için Halsin'e yardım edin.",
            "Paladin Tip: Use Divine Smite on critical hits for maximum damage.",.",,
            "Paladin Tip: Your Aura gives nearby allies bonuses to saving throws.",lü yollar sunar.",  "Paladin Tip: Your Aura gives nearby allies bonuses to
            "Paladin Tip: Lay on Hands can cure diseases and poison.",
            "Paladin Tip: Remember that your spells are fueled by your Charisma.",
            "Paladin Tip: Use your Divine Sense to detect evil and good.",nini kontrol edin.",
        ],
        "Sorcerer": [  "Bölge İpucu: Terk edilmiş evlerde gizli hazineler arayın.",
            "Sorcerer Tip: Metamagic allows you to twist your spells in unique ways.",Zhentarim'in burada bir varlığı var - etkileşimleri dikkatle seçin.",
            "Sorcerer Tip: Consider using Sorcery Points to regain spell slots.",
            "Sorcerer Tip: Your spells don't require material components unless they have a cost.",
            "Sorcerer Tip: Draconic Bloodline grants you additional resilience.",
            "Sorcerer Tip: Wild Magic can cause unpredictable effects - for better or worse.",er sunar.",
        ],   "Bölge İpucu: Düşmanca olabilecek duergar devriyelerine dikkat edin.",
        "Warlock": [      "Bölge İpucu: Bazı geçitler gizlidir ve dikkatli arama gerektirir.",
            "Warlock Tip: Your patron grants you unique abilities - use them wisely.",
            "Warlock Tip: Pact Magic is different from regular spellcasting - manage your slots carefully.",Towers": [
            "Warlock Tip: Eldritch Invocations provide various enhancements - choose those that complement your style.",şın.",
            "Warlock Tip: Remember that you can cast some spells at will.",
            "Warlock Tip: Your familiar can be a valuable scout and helper.",lir.",
        ],
        "Bard": [aldur's Gate": [
            "Bard Tip: Use Bardic Inspiration to boost your allies' abilities.",İpucu: Şehirde her biri benzersiz görevlere sahip birçok bölge vardır.",
            "Bard Tip: You can use your spells to control the battlefield.",
            "Bard Tip: Remember that your performance can also be a powerful tool.",ir.",
            "Bard Tip: College of Lore bards can learn spells from other classes.",
            "Bard Tip: Use your high Charisma for social interactions and spellcasting.",
        ]
    },gered": {
    "region_specific": {
        "Ravaged Beach": [
            "Bölge İpucu: Plajda birçok düşman var - dikkatli olun.",
            "Bölge İpucu: Kumsalda terkedilmiş eşyalar bulabilirsiniz.",
            "Bölge İpucu: Su kenarında yürüyüş yaparken dikkatli olun, bazı bölgeler tehlikeli olabilir.",  "Görev İpucu: Farklı görev çözümleri yoldaşlarınızı farklı şekilde etkileyebilir.",
        ],
        "Emerald Grove": [
            "Bölge İpucu: Bu bölgedeki ağaçlar ve bitkiler şifalı özelliklere sahip olabilir.",,
            "Bölge İpucu: Gizli yollar ve geçitler arayın.",
            "Bölge İpucu: Buradaki yaratıklar genellikle saldırgan değildir, ancak provoke edilirse tehlikeli olabilirler.",.",
        ],  "Savaş İpucu: Menzilli saldırganlarınızı yüksek zeminde konumlandırın.",
        "Blighted Village": [
            "Bölge İpucu: Köyde birçok hasta ve yaralı var - yardım edebilirsiniz.",
            "Bölge İpucu: Terkedilmiş evlerde değerli eşyalar bulabilirsiniz.",ilirler.",
            "Bölge İpucu: Bu köydeki insanlar genellikle güvensizdir, dikkatli olun.",",
        ],sünü kullanın.",
        "Moonrise Towers": [   "Tuzak İpucu: Tuzaklardan şüpheleniyorsanız önden harcamaya değer çağrılmış varlıkları gönderin.",
            "Bölge İpucu: Mutlak'ın takipçileri burada çok sayıda - dikkatle yaklaşın.",   ],
            "Bölge İpucu: Karmaşık yapıda gizli geçitler arayın.",       "chest": [
            "Bölge İpucu: Buradaki farklı fraksiyonlar birbirine karşı oynatılabilir.",            "Sandık İpucu: Bazı kilitli sandıklar maymuncuk açma başarısız olursa kırılabilir.",
        ],            "Sandık İpucu: Değerli görünen sandıkları açmadan önce tuzakları kontrol edin.",
        "Baldur's Gate": [belirli anahtarlar gerektirir.",
            "Bölge İpucu: Şehirde her biri benzersiz görevlere sahip birçok bölge vardır.",     "Sandık İpucu: Tüm değerli eşyalar belirgin kaplarda değildir.",
            "Bölge İpucu: Çeşitli loncalar farklı ödüllerle fraksiyon görevleri sunar.",
            "Bölge İpucu: Sokak çocukları genellikle şehir hakkında değerli bilgilere sahiptir.",
            "Bölge İpucu: Kalabalık alanlarda yankesicilere dikkat edin.",     "Büyü İpucu: Alan etkili büyüler müttefiklere isabet edebilir - dikkatli konumlanın.",
        ]kileşime girer.",
    }, Karşı Büyü, düşman büyücülerin güçlü büyüler kullanmasını önleyebilir.",
    "keyword_triggered": {            "Büyü İpucu: Önemli hasar alırsanız konsantrasyon büyüleri sona erer.",
        "quest": [
            "Görev İpucu: Detaylı görev hedefleri için günlüğünüzü kontrol edin.",
            "Görev İpucu: Bazı görevlerin zamana duyarlı bileşenleri vardır.",
            "Görev İpucu: Yan görevler değerli ödüller ve deneyim sağlayabilir.",
            "Görev İpucu: Farklı görev çözümleri yoldaşlarınızı farklı şekilde etkileyebilir.",
        ],
        "battle": [
            "Savaş İpucu: Zorlu karşılaşmalardan önce yemek bonuslarını kullanmayı düşünün.",
            "Savaş İpucu: Bazı düşmanların kullanabileceğiniz belirli zayıflıkları vardır.", is the core 'agent' logic.
            "Savaş İpucu: Çevresel etkiler savaşın gidişatını değiştirebilir.",
            "Savaş İpucu: Menzilli saldırganlarınızı yüksek zeminde konumlandırın.",te: {game_state}")
        ],dations = []
        "trap": [
            "Tuzak İpucu: Yüksek algılamaya sahip karakterler tuzakları daha kolay görebilirler.",
            "Tuzak İpucu: Bazı tuzaklar etkisiz hale getirilebilir, diğerlerinden kaçınılmalıdır.",
            "Tuzak İpucu: Tehlikeli alanlardan şüpheleniyorsanız Tuzakları Bul büyüsünü kullanın.",ast = current_time - game_state.last_tip_time
            "Tuzak İpucu: Tuzaklardan şüpheleniyorsanız önden harcamaya değer çağrılmış varlıkları gönderin.",mmendation attempt: {time_since_last:.2f}sec")
        ],
        "chest": [
            "Sandık İpucu: Bazı kilitli sandıklar maymuncuk açma başarısız olursa kırılabilir.",
            "Sandık İpucu: Değerli görünen sandıkları açmadan önce tuzakları kontrol edin.",generate new recommendations.")
            "Sandık İpucu: Bazı sandıklar başka yerlerde bulunan belirli anahtarlar gerektirir.",
            "Sandık İpucu: Tüm değerli eşyalar belirgin kaplarda değildir.",
        ],t = LLMAPIClient()  # Initialize an instance of LLMAPIClient
        "spell": [
            "Büyü İpucu: Alan etkili büyüler müttefiklere isabet edebilir - dikkatli konumlanın.",s_available():
            "Büyü İpucu: Bazı büyüler çevre ile benzersiz şekillerde etkileşime girer.",
            "Büyü İpucu: Karşı Büyü, düşman büyücülerin güçlü büyüler kullanmasını önleyebilir.",tions = llm_client.get_recommendation(game_state)
            "Büyü İpucu: Önemli hasar alırsanız konsantrasyon büyüleri sona erer.",
        ]       if llm_recommendations:
    }
}c in llm_recommendations]
                    # Recommendations were generated, update the last tip time
e_state.last_tip_time = current_time
def generate_recommendations(game_state: GameState) -> list[str]:
    """)
    Generates recommendations based on current game state.
    This is the core 'agent' logic.                logger.debug("LLM API not configured, no recommendations will be shown")
            except ImportError:
    Args:shown")
        game_state: Current game state object
        r while fetching LLM recommendations: {e}", exc_info=True)
    Returns:
        List of recommendation strings: {120 - time_since_last:.2f}sec")
    """ waiting period
    logger.debug(f"Generating recommendations for state: {game_state}")
    recommendations = []    # Limit the number of recommendations

    # Time controlations generated in this cycle.")
    current_time = time.time()    return recommendations
    time_since_last = current_time - game_state.last_tip_time
    logger.debug(f"Time since last tip attempt: {time_since_last:.2f}s")
ample usage: Create a state and generate recommendations
    # Check if cooldown period has passed (previous: 6 minutes/360 seconds)    print("Testing Decision Engine...")
















































        print(f"- {rec}")    for rec in recs:    print("\nOluşturulan Öneriler:")    recs = generate_recommendations(current_state)    print(f"Mevcut Durum: {current_state}")    current_state.character_class = "Cleric" # Sınıf tespiti simülasyonu    current_state.update_from_ocr(test_text)    test_text = "Entering region: Moonrise Towers\nSome other irrelevant text.\nJournal Updated"    # Bazı metin bulma simülasyonu    current_state = GameState()    print("Karar Motoru Test Ediliyor...")if __name__ == '__':  # Örnek kullanım: Bir durum oluştur ve öneriler oluştur    return recommendations    logger.info(f"Generated {len(recommendations)} recommendations this cycle.")    recommendations = recommendations[:3]    # Limit recommendations        return []  # Return empty list during cooldown period        logger.debug(f"Cooldown period active. Skipping recommendation generation. Time remaining: {120 - time_since_last:.2f}s")    else:            logger.error(f"Error getting LLM recommendations: {e}", exc_info=True)        except Exception as e:            logger.warning("LLM module not found, no recommendations will be shown")        except ImportError:                logger.debug("LLM API not configured, no recommendations will be shown")            else:                    logger.warning("LLM API returned no recommendations")                else:                    game_state.last_tip_time = current_time                    # Recommendation generated, update last tip time                    recommendations = [f"AI: {rec}" for rec in llm_recommendations]                    logger.info(f"Using {len(llm_recommendations)} LLM-generated recommendations")                if llm_recommendations:                                llm_recommendations = llm_client.get_recommendation(game_state)                logger.info("Requesting recommendations from LLM API...")            if llm_client.is_available():        try:        llm_client = LLMAPIClient()  # Initialize LLMAPIClient instance        # --- LLM-based recommendations ---                logger.info("Cooldown period passed. Attempting to generate new recommendations.")    if time_since_last >= 120:  # 120 seconds = 2 minutes    current_state = GameState()
    # Simulate some text finding
    test_text = "Entering region: Moonrise Towers\nSome other irrelevant text.\nJournal Updated"
    current_state.update_from_ocr(test_text)
    current_state.character_class = "Cleric" # Simulate class detection

    print(f"Current State: {current_state}")
    recs = generate_recommendations(current_state)

    print("\nGenerated Recommendations:")
    for rec in recs:
        print(f"- {rec}")
