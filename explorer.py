import streamlit as st
import faiss
import pickle
import json
import numpy as np
from sentence_transformers import SentenceTransformer


# -------------------
# Dosyalarƒ± Y√ºkle
# -------------------
FAISS_PATH = "vector_db/bg3_knowledge.faiss"
META_PATH_PKL = "vector_db/bg3_knowledge_metadata.pkl"
META_PATH_JSON = "vector_db/metadata.json"

# Metadata dosyasƒ± olarak pkl ya da json kullan
try:
    with open(META_PATH_PKL, "rb") as f:
        metadata = pickle.load(f)
except:
    with open(META_PATH_JSON, "r", encoding="utf-8") as f:
        metadata = json.load(f)

# FAISS index y√ºkle
index = faiss.read_index(FAISS_PATH)

# Model y√ºkle
model = SentenceTransformer("all-MiniLM-L6-v2")

# -------------------
# Streamlit UI
# -------------------
st.title("üîç GameScout VectorDB Explorer")

query = st.text_input("üß† Sorgu girin", "")
top_k = st.slider("üî¢ Ka√ß sonu√ß d√∂ns√ºn?", 1, 10, 3)

if query:
    # Sorguyu vekt√∂re d√∂n√º≈üt√ºr
    query_vector = model.encode([query])
    
    # Vekt√∂r veritabanƒ±nda arama yap
    D, I = index.search(np.array(query_vector).astype("float32"), top_k)
    
    # Sonu√ßlarƒ± g√∂ster
    st.subheader("üéØ E≈üle≈üen Sonu√ßlar:")
    
    # Bulunan her sonu√ß i√ßin
    for i, idx in enumerate(I[0]):
        if idx != -1:  # Ge√ßerli bir indeks ise
            doc = metadata[idx]
            
            # Ba≈ülƒ±k
            st.markdown(f"### üßæ {doc.get('title', 'Ba≈ülƒ±k Yok')}")
            
            # URL varsa g√∂ster
            if 'url' in doc:
                st.markdown(f"[üîó Kaynak Link]({doc['url']})")
            
            # Benzerlik skoru
            similarity = 1.0 / (1.0 + D[0][i])  # Mesafeyi benzerlik skoruna √ßevir
            st.progress(float(similarity))
            st.text(f"Benzerlik: {similarity:.2f}")
            
            # ƒ∞√ßerik
            content = doc.get("content", "ƒ∞√ßerik Yok")
            st.text_area("üìö ƒ∞√ßerik", content[:600] + ("..." if len(content) > 600 else ""), 
                         height=200, key=f"text_{i}")
            
            # Etiketler
            if 'tags' in doc and doc['tags']:
                st.markdown(f"**Etiketler:** {', '.join(doc['tags'])}")
                
            st.markdown("---")
    
    # Sonu√ß bulunamazsa bilgi ver
    if len(I[0]) == 0 or all(idx == -1 for idx in I[0]):
        st.info("Bu sorgu i√ßin e≈üle≈üen sonu√ß bulunamadƒ±.")
else:
    st.info("Bilgi almak i√ßin yukarƒ±ya bir sorgu girin.")

